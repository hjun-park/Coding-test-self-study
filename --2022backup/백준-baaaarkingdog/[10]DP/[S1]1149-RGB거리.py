import sys

input = sys.stdin.readline

'''
RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

3   -> 집의 수
26 40 83    -> 각 집을 빨,초,파로 칠하는 비용
49 60 57
13 89 99

96

1) dp 정의 
    d[i] = N
    -> 집 i개를 칠하는데 드는 최소한의 비용 (오답)
    -> TODO: 2차원 배열을 두고 만들기 
    
    d[i][0] = N
    -> i-1까지 칠하고 i번쨰 집을 0번째 색으로 칠했을 때 
2) 점화식 추론
    d[0][0] = h[0][0]
    d[0][1] = h[0][1]
    d[0][2] = h[0][2]

    h[i][0] += min(h[i - 1][1], h[i - 1][2])
    h[i][1] += min(h[i - 1][0], h[i - 1][2])
    h[i][2] += min(h[i - 1][0], h[i - 1][1])
    
3) 초깃값 정의
'''

N = int(input().rstrip())
h = [list(map(int, input().split())) for _ in range(N)]

for i in range(1, N):
    h[i][0] += min(h[i - 1][1], h[i - 1][2])
    h[i][1] += min(h[i - 1][0], h[i - 1][2])
    h[i][2] += min(h[i - 1][0], h[i - 1][1])

print(min(h[N - 1][0], h[N - 1][1], h[N - 1][2]))
