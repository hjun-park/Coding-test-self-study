import sys

input = sys.stdin.readline

'''
1) dp 테이블 정의
  d[i] = N
  정수 i를 1, 2, 3의 합으로 나타내는 경우의 수
2) 초깃값 선정

3) 점화식 찾기 (1부터 채워 나감)

d[1] - 1가지
 - 1
 
 d[2] - 2가지
  - 1 + 1
  - 2 
  
d[3] - 4가지
 - 1 + 1 + 1
 - 1 + 2
 - 2 + 1
 - 3 
 
 d[4] - 7가지
 d[5] - 12가지
  1) 1 + 1 + 1 + 1 + 1  2) 1 + 1 + 1 + 2  3) 1 + 1 + 2 + 1
  4) 1 + 2 + 1 + 1   5) 2 + 1 + 1 + 1   6) 1 + 2 + 2 
  7) 2 + 1 + 2  8) 2 + 2 + 1   9) 1 + 1 + 3  10) 1 + 3 + 1
  11) 3 + 1 + 1   12) 2 + 3    13) 3 + 2

d[6] =
 1 + 1 + 1 + 1 + 1 + 1

d[i] = d[i-1] + d[i-2] + d[i-3]
'''

# TODO: TOP-DOWN, BOTTOM-UP 구분하면 좋을 문제
# TODO : 정리

nums = [int(input().rstrip()) for _ in range(int(input().rstrip()))]
d = [0] * (max(nums) + 2)


# ====================== BOTTOM-UP 풀이방식(반뵥문 채우기) ===================#
# # 특징  : 빠름 but 메모리 잡아야 함

d[1] = 1
d[2] = 2
d[3] = 4

for i in range(4, max(nums)+1):
    d[i] = d[i-1] + d[i-2] + d[i-3]

for n in nums:
    print(d[n])
# ============================================================#

# ====================== TOP-DOWN풀이방식(재귀사용) ===================#
# # 특징 : 메모리 절감, but 재귀 속도 조금 낮음
# def logic(x):
#     if x == 1:
#         return 1
#     elif x == 2:
#         return 2
#     elif x == 3:
#         return 4
#     else:
#         return logic(x - 1) + logic(x - 2) + logic(x - 3)
#
#
# for n in nums:
#     print(logic(n))
# ============================================================#
