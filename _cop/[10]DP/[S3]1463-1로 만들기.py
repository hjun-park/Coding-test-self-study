import sys

input = sys.stdin.readline

'''
1) DP 테이블 정의 ( a = 정답 b이다 )

2) 초깃값 선정 d[1], d[2] 규칙에서 당장 계산 가능하다면 입력

3) 점화식 찾기 ( 1부터 테이블을 채워 나간다. ) 
'''

# 1) d[i] = 1로 만드는 연산 최소 횟수
'''
d[2] = 1 (1을 뺀다)
d[3] = 1 (3으로 나눈다)
d[4] = 2 (2로 나는 뒤 1을 뺀다 // 2를 2번 나눈다)
d[5] = 3 (1 빼고 2로 나눈 뒤 1을 뺀다)
d[6] = 2 (3으로 나누고 2로 나눈다)
d[7] = 3 (1 빼고 d[6])
d[8] = 3 (8 // 2 // 2 // 2)
d[9] = 2
'''

'''
BOTTOM - TOP 구현
1) 초깃값 설정 후 N까지 진행하면서 N까지 채워나감 , 
 1) 3으로 나눠진다면 3으로 나누고 dp 적용
 
 1) 일단 1먼저 빼보고 dp 적용
 2) 3으로 나누고 dp 적용하게 1 빼고 dp 적용한 것보다 작은지 ?
 3) 2로 나누고 dp 적용한게 1빼고 dp 적용한 것보다 작은지 ?
'''

N = int(input().rstrip())

d = [0] * (N + 2)

for i in range(2, N + 1):

    # !) 먼저 빼보고 아래 비교
    d[i] = d[i - 1] + 1

    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)
    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)

print(d[N])
